import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.model.script.actions.Timer

var String USER_EMAIL = "alexrupp@free.fr"
// var String USER_EMAIL = "raphaellaguerre75@gmail.com"

var Number counter = 1
var Timer timer = null

var Timer timerPanOnHotplate = null
var Timer timerHotplateWithoutPan = null
var Timer timerAbsence = null

var Number presence = 0
var Number hotplateHotWithPan = 0

//Variables smart pilulier
var Number pill_taken = 0

/**
 * Light up the arduino light at start up.
 */

rule "Open light1"
     when
	System started
     then
     	   // Shut down every light
	   postUpdate(LetterLed, OFF)
	   postUpdate(PackageLed, OFF)
	   postUpdate(AlarmHotplateLed, OFF)
	   postUpdate(HotplateLed, OFF)

	   // Init every states
	   postUpdate(MailboxText, "La boite aux lettres est vide.")
	   postUpdate(KitchenText, "La plaque est éteinte.")
	   postUpdate(PillboxText, "Les médicaments sont disponibles.")

	/* sendCommand(Mailbox, "SET LetterLed ON;") */
	/* sendMail(USER_EMAIL, "Test", "This is the message.") */
end


/**
 * Mailbox -> Openhab
 */
rule "Mail Box"
  when Item Mailbox received update then
       /*1585 1570*/
      var String state = Mailbox.state.toString

      //      logInfo("MailBox", "Mailbox state: " + Mailbox.state) 
      if (state.contains("MailboxOpenedDoor")){ 
	println("DEBUG: Door opened.");
      } else if(state.contains("MailboxHeight")){
      	var int EMPTY = 2060;
	var int LETTER = 2000;

	var int valuePos = state.indexOf(":")+1
    	var int height = Integer::parseInt(state.mid(valuePos, state.indexOf(';')-valuePos))
	println("DEBUG: Mailbox height: "+height)
	var String mailboxState = ""

	if(height >= EMPTY){
	   mailboxState = "La boite aux lettres est vide."
	   postUpdate(LetterLed, OFF)
	   postUpdate(PackageLed, OFF)
	} else if(height >= LETTER){
	   mailboxState = "Une lettre est détectée."
     	   sendMail(USER_EMAIL, "[Boite_Aux_Lettres] Lettre reçue", "Bonjour,\n Une lettre vous attend dans la boite au lettre." +
	   					     	    	    "\n Cordialement,\n Votre Boite Au Lettre.")
	   postUpdate(LetterLed, ON)
	   postUpdate(PackageLed, OFF)
	} else {
	   mailboxState = "Un colis est détecté."
     	   sendMail(USER_EMAIL, "[Boite_Aux_Lettres] Colis reçu", "Bonjour,\n Un colis vous attend dans la boite au lettre." +
	   					     	    	    "\n Cordialement,\n Votre Boite Au Lettre.")
	   postUpdate(LetterLed, OFF)
	   postUpdate(PackageLed, ON)
	}

	println("Mailbox: " + mailboxState)
        postUpdate(MailboxText, mailboxState)
      
      } else if(state.contains("MailboxLightDetected")){      
	println("DEBUG: Light detected.")
      }
  end


/**
 * Mailbox -> Openhab
 */
rule "Switch LetterLed"
when 
Item LetterLed received update
then
sendCommand(Mailbox, "SET LetterLed " + (if(LetterLed.state == ON) "ON;" else "OFF;"))
println("ok : Mailbox received update " + LetterLed.state)
end

rule "Switch PackageLed"
when 
Item PackageLed received update
then
sendCommand(Mailbox, "SET PackageLed " + (if(PackageLed.state == ON) "ON;" else "OFF;"))
println("ok : Mailbox received update " + PackageLed.state)
end


rule Timer
when
/* Item Hotplate changed */
Item Hotplate received update
then
	var Number TIME_LIMIT_HOTPLATE_WITH_PAN = 1 /* 30 */
	var Number TIME_LIMIT_HOTPLATE_WITHOUT_PAN = 1
	var Number TIME_LIMIT_ABSENCE = 1

	/* Hotplate is ON && there is nothing on it : */
	if(Hotplate.state.toString.trim == "HotWithoutPan"){
	        hotplateHotWithPan = 0
		sendCommand(AlarmHotplateLed,OFF) 

		if(timerHotplateWithoutPan == null) {
		        /* Cancel timer that detects a pan staying too much time on the hotplate */
			if(timerPanOnHotplate != null && timerPanOnHotplate.cancel()) {
				timerPanOnHotplate = null
				println("DEBUG: [Timer Canceled] ["+TIME_LIMIT_HOTPLATE_WITH_PAN+"min] (Hotplate hot with pan)")
			}

			/* Starts timer to shutdown the hotplane after 2mins */
			println("DEBUG: [Timer Started] ["+TIME_LIMIT_HOTPLATE_WITHOUT_PAN+"min] (Hotplate hot without pan)")
			postUpdate(KitchenText, "La plaque chauffe, sans surveillance depuis moins de "+TIME_LIMIT_HOTPLATE_WITH_PAN+"min.")
			timerHotplateWithoutPan = createTimer(now.plusMinutes(TIME_LIMIT_HOTPLATE_WITHOUT_PAN)) [|
				timerHotplateWithoutPan = null
				postUpdate(KitchenText, "La plaque est éteinte.")
				sendCommand(Hotplate, "HotplateOff")
				println("DEBUG: [Timer Ended] ["+TIME_LIMIT_HOTPLATE_WITHOUT_PAN+"min] (Hotplate hot without pan) : hotplate deactivated")
			]
		}
		else{
			println("DEBUG: [MSG RECEIVED] (HotWithoutPan) : A timer is still running")
		}
	}

	if (Hotplate.state.toString.trim == "HotWithPan") {
	     println("DEBUG: [MSG RECEIVED] (HotWithPan) : The hotplate is hot with a pan on it.")
	     postUpdate(KitchenText, "La casserole chauffe, sous surveillance.")
	     hotplateHotWithPan = 1

	     /* Cancel timer that detects a hotplate without pan. */
	     if(timerHotplateWithoutPan != null && timerHotplateWithoutPan.cancel()) {
			timerHotplateWithoutPan = null
			println("DEBUG: [Timer Canceled] ["+TIME_LIMIT_HOTPLATE_WITHOUT_PAN+"min] (Hotplate hot without pan)")
	     }

	}

	/* Hotplate is on AND there is a pan on it */
	if (Hotplate.state.toString.trim == "HotWithPanWhitoutPresence") {
	        if(timerPanOnHotplate == null) {
			/* Starts a timer to detect a pan staying too much time on the hotplate */
			println("DEBUG: [Timer Started] ["+TIME_LIMIT_HOTPLATE_WITH_PAN+"min] (Hotplate hot with pan)")
			postUpdate(KitchenText, "La casserole chauffe sans surveillance (depuis moins de "+TIME_LIMIT_HOTPLATE_WITHOUT_PAN+"min.")
			timerPanOnHotplate = createTimer(now.plusMinutes(TIME_LIMIT_HOTPLATE_WITHOUT_PAN)) [|
				timerPanOnHotplate = null
				sendCommand(AlarmHotplateLed,ON) 
				println("DEBUG: [Timer Ended] ["+TIME_LIMIT_HOTPLATE_WITH_PAN+"min] (Hotplate hot with pan) : Light alarm activated")
				postUpdate(KitchenText, "La casserole chauffe, sans surveillance, depuis plus de "+TIME_LIMIT_HOTPLATE_WITHOUT_PAN+"min.")
			]
		} else {
			println("DEBUG: [MSG RECEIVED] (HotWithPanWithoutPresence : A timer is still running")
		}
	} 
	
	/* Presence detected */
	if(Hotplate.state.toString.trim == "PresenceDetected"){
	     presence = 1

	     /* Re-schedule the timer if there was one */
	     if(timerPanOnHotplate != null){
	     	timerPanOnHotplate.reschedule(now.plusMinutes(TIME_LIMIT_HOTPLATE_WITH_PAN))
		println("DEBUG: [Timer Re-scheduled] ["+TIME_LIMIT_HOTPLATE_WITH_PAN+"min] (Hotplate hot with pan)")
	     }
	     
	     /* If there was an alarm, stop it */
	     if(AlarmHotplateLed.state == ON){
	     	sendCommand(AlarmHotplateLed,OFF) 
		println("DEBUG: [Light Alarm Stopped] (Hotplate hot with pan)")
	     }

	     /* Start or Restart timer of absence */
	     if(timerAbsence != null && timerAbsence.cancel()) {
			timerAbsence = null
	     }

	     println("DEBUG: [Timer Updated] ["+TIME_LIMIT_ABSENCE+"min] (Absence detector restarted.)")
	     timerAbsence = createTimer(now.plusMinutes(TIME_LIMIT_ABSENCE)) [|
	     		presence = 0

			println("DEBUG: [Timer Ended] ["+TIME_LIMIT_ABSENCE+"min] (Absence) : absence detected")
	     		if(hotplateHotWithPan == 1){
				sendCommand(Hotplate, "HotWithPanWhitoutPresence")
			}
	     ]
	}
	
	/* Hotplate is off */
	if (Hotplate.state.toString.trim == "HotplateOff"){
		println("DEBUG: [Hotplate OFF]")
		postUpdate(KitchenText, "La plaque est éteinte.")
	        hotplateHotWithPan = 0

	     	/* Stop all timers (except absence) : */
		if(timerHotplateWithoutPan != null && timerHotplateWithoutPan.cancel()) {
			timerHotplateWithoutPan = null
			println("DEBUG: [Timer Canceled] ["+TIME_LIMIT_HOTPLATE_WITHOUT_PAN+"min] (Hotplate hot without pan)")
		}
		if(timerPanOnHotplate != null && timerPanOnHotplate.cancel()) {
			timerPanOnHotplate = null
			println("DEBUG: [Timer Canceled] ["+TIME_LIMIT_HOTPLATE_WITH_PAN+"min] (Hotplate hot with pan)")
		}

		/* Shutdown hotplate led */
		sendCommand(HotplateLed, OFF) 		

		/* Also shutdown the alert */
		sendCommand(AlarmHotplateLed,OFF) 
	}
end

rule "Switch HotplateLed"
when
Item HotplateLed received update
then
sendCommand(Hotplate, "SET HotplateLed " + (if(HotplateLed.state == ON) "ON;" else "OFF;"))
println("DEBUG: [Hotplateled] received update " + HotplateLed.state)
end


rule "Switch AlarmHotplateLed"
when
Item AlarmHotplateLed received update
then
sendCommand(Hotplate, "SET AlarmHotplateLed " + (if(AlarmHotplateLed.state == ON) "ON;" else "OFF;"))
println("DEBUG: [AlarmHotplateled] received update " + AlarmHotplateLed.state)
end

/* *********************************************************************************************** */
/* ******************************************  PILLBOX  ****************************************** */
/* *********************************************************************************************** */


//Règles pour le smart pilulier

//Declenche l'alarme si le médicement n'a pas déjà été pris
rule PillboxWarning
when
//Time is noon
       Item Alarme_pilulier received update
then
	println("Règle pillboxwarning")
	println("etat Alarme pilulier " + Alarme_pilulier.state)
	println("clignote si medic pas pris")

if (pill_taken == 0) {
   	println("Warning pilbox")
	postUpdate(PillboxText, "Il est l'heure de prendre les médicaments.")
	//Si il y a quelqu'un dans la cuisine, on active la led du smart pilulier
   	if (presence == 1) {
    	   sendCommand(Pillbox, "CPIL;")
  	}
   	else {
    	   sendCommand(Pillbox, "CSALON;")
   	}
}
end

//Stop l'alarme à la fin d'une période de prise de médicament
rule EndPillBoxWarning
when
//Time is midnight
Item Fin_periode_pilulier received update
then
println("règle EndPillBoxWarning")
println("etat Fin_periode_pilulier " + Fin_periode_pilulier.state)
println("stop clignote")
//Si le médicament n'a pas été pris, on envoie une notification au responsable
if (pill_taken == 0) {
  sendMail(USER_EMAIL, "[Pillbox] Warning medication", "Your patient did not took his medications.")
  postUpdate(PillboxText, "Les médicaments sont disponibles. Attention, vous avez oublié de prendre vos médicaments la dernière fois.")
  sendCommand(Pillbox, "STOP;")
}
else {
  pill_taken = 0
  postUpdate(PillboxText, "Les médicaments sont disponibles.")
}
end


//Enregistre la prise de médicament 
// ou reporte une prise en trop
rule "Pill Taken"
when
Item Pillbox received update
then
println("regle Pill Taken")
// si la boite a ete ouverte, on enregistre la prise de médicament
if(Pillbox.state.toString.trim == "PillTaken") {
    if (pill_taken == 0) {
       println("médicaments pris")
       postUpdate(PillboxText, "Les médicaments ont été pris.")
       pill_taken = 1
       sendCommand(Pillbox, "STOP;")
    }
    else {
    	 println("envoyer notif trop de medoc")
	 postUpdate(PillboxText, "Attention, les médicaments ont déjà été pris.")
    	 sendMail(USER_EMAIL, "[Pillbox] Too much pills", "Too many pills taken by your patient.")
    }
}

end


/**
 * Try displaying string :
 * // TODO: To remove  + push icons
 */
/*
   rule Startup
   when 
   System started
   then
   var String mailboxState = "Letter detected"

   println("Mailbox: "+mailboxState)
   postUpdate(MailboxText, mailboxState)
   end
 */
